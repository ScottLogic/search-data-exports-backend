service: sde

plugins:
  - serverless-webpack
  - serverless-step-functions
  - serverless-stack-output

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  esEndpoint: ${ssm:/sde-${self:custom.stage}-elasticsearch-endpoint}
  s3BucketName: ${ssm:/sde-${self:custom.stage}-s3-bucket-name}
  subscriptionsTableName: ${self:custom.stage}-sde-subscriptions
  webpack:
    includeModules: true # enable auto-packing of external modules
  output:
    handler: build_scripts/output.handler

package:
  individually: true

provider:
  name: aws
  runtime: nodejs10.x
  tags:
    Project: ${self:service}
    Environment: ${self:custom.stage}
  stackTags:
    Project: ${self:service}
    Environment: ${self:custom.stage}

# you can overwrite defaults here
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:DescribeExecution
        - states:SendTaskSuccess
        - states:StartExecution                
        - states:GetActivityTask
        - execute-api:Invoke
        - es:ESHttpPost
        - s3:PutObject
        - s3:PutObjectAcl
        - ses:SendEmail
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource:
        - "*"

functions:
  pushNotificationOpenConnection:
    handler: functions/pushNotificationOpenConnection.handler
    description: Notified when client connects to websocket to complete activity
    events:
      - websocket:
          route: OpenConnection
  pushNotificationToClient:
    handler: functions/pushNotificationToClient.handler
    description: Send report URL to client over websocket
    environment:
      WEBSOCKET_ENDPOINT_URL:
        !Join
          - ''
          - - 'https://'
            - !Ref WebsocketsApi
            - '.execute-api.'
            - ${self:custom.region}
            - '.amazonaws.com/'
            - ${self:custom.stage}
  downloadRequest:
    handler: functions/downloadRequest.handler
    description: Triggered when client requests a download
    events:
      - http:
          path: download-request
          method: post
          cors: true
    environment:
      CSV_DOWNLOAD_REQUEST_STEP_FUNCTION_NAME: "${self:service}-${self:custom.stage}-csv-download-request"
      CSV_DOWNLOAD_REQUEST_STEP_FUNCTION_ARN:
        !Join
          - ':'
          -
            - 'arn:aws:states'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'stateMachine'
            - '${self:service}-${self:custom.stage}-csv-download-request'
      OPEN_CONNECTION_ACTIVITY_ARN:
        !Join
          - ':'
          -
            - 'arn:aws:states'
            - Ref: 'AWS::Region'
            - Ref: 'AWS::AccountId'
            - 'activity:AwaitOpenConnectionFromClient'
  search:
    handler: functions/search.handler
    description: Performs an ES search and returns the resulting hits
    events:
      - http:
          path: search
          method: post
          cors: true
    environment:
      ES_SEARCH_API: ${self:custom.esEndpoint}
  graphicalReport:
    handler: functions/graphicalReport.handler
    events:
      - http:
          path: report/graphical
          method: post
          cors: true
    environment:
      ES_SEARCH_API: ${self:custom.esEndpoint}
      S3_BUCKET_NAME: ${self:custom.s3BucketName}
  hybridReport:
    handler: functions/hybridReport.handler
    runtime: nodejs8.10
    events:
      - http:
          path: report/hybrid
          method: post
          cors: true
    environment:
      ES_SEARCH_API: ${self:custom.esEndpoint}
      S3_BUCKET_NAME: ${self:custom.s3BucketName}
  sendEmail:
    handler: functions/sendEmail.handler
    description: Sends an email to the specified email address with the report S3 link
    environment:
      EMAIL_SENDER_ADDRESS  : "rharrington@scottlogic.com"
  reportStatus:
    handler: functions/reportStatus.handler
    description: Returns the execution status of a generate report task
    events:
      - http:
          path: report-status
          method: post
          cors: true
  reportGenerator:
    handler: functions/reportGenerator.handler
    description: Performs an ES search and generates a report in S3
    environment:
      ES_SEARCH_API: ${self:custom.esEndpoint}
      S3_BUCKET_NAME: ${self:custom.s3BucketName}
  createPost:
    handler: functions/createPost.handler
    description: Save a new post into ES
    events:
      - http:
          path: posts
          method: post
          cors: true
    environment:
      ES_SEARCH_API: ${self:custom.esEndpoint}
  createSubscription:
    handler: functions/createSubscription.handler
    description: Adds a daily digest subscription for an SDE user
    events:
      - http:
          path: subscriptions
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTableName}
  deleteSubscription:
    handler: functions/deleteSubscription.handler
    description: Deletes a specified daily digest subscription for an SDE user
    events:
      - http:
          path: subscriptions
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTableName}
  getUserSubscriptions:
    handler: functions/getUserSubscriptions.handler
    description: Gets the daily digest subscriptions for an SDE user
    events:
      - http:
          path: subscriptions
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer
    environment:
      SUBSCRIPTIONS_TABLE: ${self:custom.subscriptionsTableName}

stepFunctions:
  stateMachines:
    csvDownloadRequest:
      name: "${self:service}-${self:custom.stage}-csv-download-request"
      definition:
        Comment: "My test step function"
        StartAt: "Choose download type"
        States:
          "Choose download type":
            Type: Choice
            Choices:
            -
              Variable: "$.type"
              StringEquals: email
              Next: "Email report request"
            -
              Variable: "$.type"
              StringEquals: direct
              Next: "Direct download of report"
            -
              Variable: "$.type"
              StringEquals: push
              Next: "Push notification report request"
          "Email report request":
            Type: Pass
            Next: "Generate CSV Report for email"
          "Generate CSV Report for email":
            Type: Task
            Resource:
              Fn::GetAtt: [reportGenerator, Arn]
            ResultPath: "$.reportOutput"
            Next: "Email CSV Report link to user"
          "Email CSV Report link to user":
            Type: Task
            Resource: "arn:aws:states:::lambda:invoke"
            Parameters:
              FunctionName:
                Fn::GetAtt: [sendEmail, Arn]
              Payload:
                email:
                  "to.$": "$.parameters.emailAddress"
                  subject: "CSV Email report"
                  "reportURL.$": "$.reportOutput.reportURL"
            End: true
          "Direct download of report":
            Type: Pass
            Next: "Generate CSV Report for direct download"
          "Generate CSV Report for direct download":
            Type: Task
            Resource:
              Fn::GetAtt: [reportGenerator, Arn]
            ResultPath: "$.reportOutput"
            OutputPath: "$.reportOutput"
            End: true
          "Push notification report request":
            Type: Pass
            Next: "Push notification parallel"
          "Push notification parallel":
            Type: Parallel
            Next: "Push Report URL To Client"
            Branches:
            -
              StartAt: "Generate CSV Report for push notification"
              States:
                "Generate CSV Report for push notification":
                  Type: Task
                  Resource:
                    Fn::GetAtt: [reportGenerator, Arn]
                  ResultPath: "$.reportOutput"
                  OutputPath: "$.reportOutput"
                  End: true
            -
              StartAt: "Await OpenConnection from Client"
              States:
                "Await OpenConnection from Client":
                  Type: Task
                  Resource:
                    !Join
                      - ':'
                      -
                        - 'arn:aws:states'
                        - Ref: 'AWS::Region'
                        - Ref: 'AWS::AccountId'
                        - 'activity:AwaitOpenConnectionFromClient'
                  End: true
          "Push Report URL To Client":
            Type: Task
            Resource:
              Fn::GetAtt: [pushNotificationToClient, Arn]
            End: true
  activities:
    - AwaitOpenConnectionFromClient

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
      Properties:
        UserPoolName: ${self:custom.stage}-sde-users-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
      Properties:      
        ClientName: ${self:custom.stage}-sde-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html
      Properties:
        IdentityPoolName: ${self:custom.stage}SdeIdentityPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
    ApiGatewayAuthorizer: # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-authorizer.html
      DependsOn:
        - ApiGatewayRestApi
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: ${self:custom.stage}-sde-api-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - Fn::GetAtt: [CognitoUserPool, Arn]
    SubscriptionsTable:
      Type: AWS::DynamoDB::Table # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-dynamodb-table.html
      Properties:
        TableName: ${self:custom.subscriptionsTableName}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]

    # IAM role used for authenticated users
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
